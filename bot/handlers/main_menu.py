import json
import base64
import urllib.parse
from datetime import datetime

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

from bot.handlers.states import BrandCreationStates
from bot.services.brand_ask_ai import ask_ai
from bot.services.name_gen import gen_process_and_check
from bot.handlers.keyboards.name_generate import generate_username_kb


import logging

main_menu_router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="create_brand")],
        [InlineKeyboardButton(text="üé≤ –ß—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º", callback_data="help")],
        [InlineKeyboardButton(text="üêæ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ë–æ—Ç –∏ –ö–æ—Ç", url="https://t.me/bot_and_kot")]
    ])

    await message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def back_to_menu_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
        ]
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é¬ª
@main_menu_router.callback_query(lambda c: c.data == "start")
async def cmd_start_from_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await show_main_menu(query.message)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
import urllib.parse

from bot.handlers.brand_gen import stage1_problem  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

@main_menu_router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        args = parts[1].strip()
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-—ç–Ω–∫–æ–¥–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        args = urllib.parse.unquote(args)
        try:
            print(f"ARGS: {args}")
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ –∑–∞—Ç–µ–º JSON
            decoded_json = base64.urlsafe_b64decode(args.encode()).decode()
            data = json.loads(decoded_json)
            username = data.get("username")
            context = data.get("context")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            # –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ username, –∞ context –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            username, context = args, None

        await state.update_data(username=username, context=context)
        await message.answer(f"üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º—è @{username}.")
        if context:
            await message.answer(f"üí° –í–∞—à–∞ –∏–¥–µ—è: {context}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≠—Ç–∞–ø 1
        await state.set_state(BrandCreationStates.waiting_for_stage1)
        await stage1_problem(message, state)
    else:
        await show_main_menu(message)






# üìç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å¬ª
@main_menu_router.callback_query(lambda c: c.data == "create_brand")
async def start_brand_process(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.answer(
        "üí° –£ –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è? –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –∏–∑ –Ω–µ—ë —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ—é –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é", callback_data="get_random_idea")],
            [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
        ])
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await state.set_state(BrandCreationStates.waiting_for_context)



# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
@main_menu_router.callback_query(lambda c: c.data == "get_random_idea")
async def generate_random_idea(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("‚è≥ –ü—Ä–∏–¥—É–º—ã–≤–∞—é –∏ –≤—ã–±–∏—Ä–∞—é —Å–≤–æ–±–æ–¥–Ω—ã–µ username...")
    await query.answer()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏ (3-6 —Å–ª–æ–≤)
    prompt = "–ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞. –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3-6 —Å–ª–æ–≤ –∏ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–ø–æ—Ö–æ–∂–µ–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–¥–µ–∏. "
    random_idea = ask_ai(prompt).strip()

    if not random_idea:
        await query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    logging.info(f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è: {random_idea}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –≤ FSM
    await state.update_data(context=random_idea, is_random=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º start_time –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ duration
    start_time = datetime.now().isoformat()
    await state.update_data(start_time=start_time)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username —á–µ—Ä–µ–∑ perform_username_generation
    from bot.handlers.name_gen import perform_username_generation
    await perform_username_generation(query, state, query.bot, style=None)


# üìç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ß—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º?¬ª
@main_menu_router.callback_query(lambda c: c.data == "help")
async def show_help(query: types.CallbackQuery):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—é"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
    ])

    await query.message.answer(
        "üß† –≠—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤—Å–µ–≥–æ –∑–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞!\n\n"
        "üí° –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞:\n"
        "1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ—Å—Ç—å username –≤ Telegram.\n"
        "2. –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –º—ã—Å–ª–µ–π.\n"
        "3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–∞—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º username!\n\n"
        "üåü –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n",
        reply_markup=kb
    )
