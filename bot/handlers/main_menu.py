import json
import base64
import urllib.parse

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

from bot.handlers.states import BrandCreationStates



main_menu_router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="create_brand")],
        [InlineKeyboardButton(text="üé≤ –ß—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º", callback_data="help")],
        [InlineKeyboardButton(text="üêæ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ë–æ—Ç –∏ –ö–æ—Ç", url="https://t.me/bot_and_kot")]
    ])

    await message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def back_to_menu_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é¬ª
@main_menu_router.callback_query(lambda c: c.data == "start")
async def cmd_start_from_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await show_main_menu(query.message)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
import urllib.parse
from bot.handlers.brand_gen import stage1_problem  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

from bot.handlers.brand_gen import stage1_problem  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

@main_menu_router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        args = parts[1].strip()
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-—ç–Ω–∫–æ–¥–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        args = urllib.parse.unquote(args)
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –∏ –∑–∞—Ç–µ–º JSON
            decoded_json = base64.urlsafe_b64decode(args.encode()).decode()
            data = json.loads(decoded_json)
            username = data.get("username")
            context = data.get("context")
        except Exception as e:
            # –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ username, –∞ context –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
            username, context = args, None

        await state.update_data(username=username, context=context)
        await message.answer(f"üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º—è @{username}.")
        if context:
            await message.answer(f"üí° –í–∞—à–∞ –∏–¥–µ—è: {context}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≠—Ç–∞–ø 1
        await state.set_state(BrandCreationStates.waiting_for_stage1)
        await stage1_problem(message, state)
    else:
        await show_main_menu(message)





# üìç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å¬ª
@main_menu_router.callback_query(lambda c: c.data == "create_brand")
async def start_brand_process(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
    ])
    await query.message.answer(
        "–û —á—ë–º –≤—ã —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—Ç–µ? –ú—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –ª—é–±—É—é –º—ã—Å–ª—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –∏–ª–∏ \n"
        "üé≤ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∏–¥–µ—é.\n\n"

        "‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ü–∏—à–∏—Ç–µ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
        reply_markup=kb
    )
    await state.set_state(BrandCreationStates.waiting_for_context)


# üìç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ß—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º?¬ª
@main_menu_router.callback_query(lambda c: c.data == "help")
async def show_help(query: types.CallbackQuery):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
    ])

    await query.message.answer(
        "üß† –≠—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤—Å–µ–≥–æ –∑–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞!\n\n"
        "üí° –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞:\n"
        "1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ—Å—Ç—å username –≤ Telegram.\n"
        "2. –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –º—ã—Å–ª–µ–π.\n"
        "3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–∞—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º username!\n\n"
        "üåü –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n",
        reply_markup=kb
    )
