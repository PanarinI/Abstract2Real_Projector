import logging
import asyncio
import re
from datetime import datetime

from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext


from services.name_gen import gen_process_and_check
from bot.handlers.keyboards.name_generate import generate_username_kb, initial_styles_kb, styles_kb
from bot.handlers.main_menu import back_to_menu_kb
from .states import BrandCreationStates

import config

username_router = Router()





@username_router.message(BrandCreationStates.waiting_for_context)
async def process_context_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—è–≤–ª—è–µ—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:
    - –ë–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–∑—É)
    - –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ –º–µ–Ω—é)
    """
    context_text = message.text.strip()
    logging.info(f"üìù –í–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}' (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(context_text) > config.MAX_CONTEXT_LENGTH:
        logging.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {config.MAX_CONTEXT_LENGTH}.")
        await message.answer(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û–±—Ä–µ–∑–∞—é –¥–æ {config.MAX_CONTEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        context_text = context_text[:config.MAX_CONTEXT_LENGTH]

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM
    await state.update_data(context=context_text)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    await message.answer(
        "üé≠ –ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?",
        reply_markup=initial_styles_kb()  # –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await state.set_state(BrandCreationStates.waiting_for_style)


@username_router.callback_query(BrandCreationStates.waiting_for_style)
async def process_style_choice(query: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ —Å—Ç–∏–ª—è.
    """
    selected_option = query.data

    if selected_option == "back_to_main_style_menu":
        await query.message.edit_reply_markup(reply_markup=initial_styles_kb())  # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.answer()
        return

    if selected_option == "choose_style":
        await query.message.edit_text(
            "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=styles_kb()
        )
        return

    elif selected_option == "no_style":
        await state.update_data(start_time=datetime.now().isoformat())
        progress_task = asyncio.create_task(send_progress_messages(query))
        await perform_username_generation(query, state, bot, style=None)
        progress_task.cancel()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    await state.update_data(start_time=datetime.now().isoformat())
    progress_task = asyncio.create_task(send_progress_messages(query))
    await perform_username_generation(query, state, bot, style=selected_option)
    progress_task.cancel()




def contains_cyrillic(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã."""
    return bool(re.search(r'[–∞-—è–ê-–Ø]', text))


async def send_progress_messages(query: CallbackQuery):
    """–§–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    messages = [
        "–ò—â—É —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ —ç—Ç–æ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ 3 –Ω–µ–∑–∞–Ω—è—Ç—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º–∞ ...",
        "‚è≥..."
    ]

    for msg in messages:
        await asyncio.sleep(6)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
            await query.message.answer(msg)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            break


async def perform_username_generation(query: CallbackQuery, state: FSMContext, bot: Bot, style: str | None):
    data = await state.get_data()
    context_text = data.get("context", "")
    start_time = data.get("start_time", "")

    if not start_time:
        logging.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! start_time –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM. –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
        start_time = datetime.now().isoformat()

    if not context_text:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=back_to_menu_kb())
        await state.clear()
        return

    logging.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: –∫–æ–Ω—Ç–µ–∫—Å—Ç='{context_text}', —Å—Ç–∏–ª—å='{style}'")

    await query.message.answer("‚è≥ –ü—Ä–∏–¥—É–º—ã–≤–∞—é –∏ –≤—ã–±–∏—Ä–∞—é —Å–≤–æ–±–æ–¥–Ω—ã–µ username...")

    try:
        raw_usernames = await asyncio.wait_for(
            gen_process_and_check(bot, context_text, style, config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )
        usernames = [u.strip() for u in raw_usernames if u.strip()]

        if not usernames:
            logging.warning(f"‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{style}').")
            await query.message.answer(
                "‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=back_to_menu_kb()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ usernames –≤ FSM
        await state.update_data(usernames=usernames)
        await handle_generation_result(query, usernames, context_text, style, start_time)
        await state.set_state(BrandCreationStates.waiting_for_username_choice)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=back_to_menu_kb())
        await state.clear()


async def handle_generation_result(query: CallbackQuery, usernames: list[str], context: str, style: str | None, start_time: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        start_dt = datetime.fromisoformat(start_time)
    except ValueError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç start_time: '{start_time}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
        start_dt = datetime.now()

    duration = (datetime.now() - start_dt).total_seconds()

    # üìå –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ!)
    message_text, keyboard = generate_username_kb(usernames, context, style, duration)

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2
    await query.message.answer(
        message_text,
        parse_mode="MarkdownV2",
        reply_markup=keyboard
    )

    logging.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")




# ‚òÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê USERNAME ‚òÖ
@username_router.callback_query(lambda c: c.data.startswith("choose_username:"))
async def choose_username_handler(query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ username –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞.
    –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π username –∏ –≤—ã–∑—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞.
    """
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π username –∏–∑ callback_data
    username = query.data.split(":", 1)[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(username=username)
    logging.info(f"‚úÖ –í—ã–±—Ä–∞–Ω username: {username}")

    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    from bot.handlers.brand_gen import stage1_problem
    await stage1_problem(query, state)

@username_router.callback_query(lambda c: c.data == "repeat")
async def repeat_username_generation(query: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.
    """
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback

    data = await state.get_data()
    context_text = data.get("context")
    style = data.get("style", None)  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–±–µ–∑ —Å—Ç–∏–ª—è"

    if not context_text:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã duration –±—ã–ª–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
    await state.update_data(start_time=datetime.now().isoformat())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username —Å —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await perform_username_generation(query, state, bot, style)
