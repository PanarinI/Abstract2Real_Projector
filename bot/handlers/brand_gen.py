import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .states import BrandCreationStates
from bot.handlers.main_menu import show_main_menu
from bot.services.brand_ask_ai import get_parsed_response



brand_router = Router()

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def generate_message_and_keyboard(answer: str, options: list[dict], prefix: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º callback_data.

    :param answer: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø–æ–¥–≤–æ–¥–∫–∞)
    :param options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç—ã, –∞—É–¥–∏—Ç–æ—Ä–∏—è, —Ü–µ–Ω–Ω–æ—Å—Ç—å)
    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "choose_format", "choose_audience", "choose_value")
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    detailed_message = f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{answer}\n\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
    for opt in options:
        detailed_message += f"‚Ä¢ {opt['full']}\n"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    buttons = [
        [InlineKeyboardButton(text=opt['short'], callback_data=f"{prefix}:{i}")]
        for i, opt in enumerate(options)
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return detailed_message, keyboard


# üìç –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
async def start_format_stage(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª username {username}.
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {username} —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–º—ã—Å–ª–∞, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±—Ä–µ–Ω–¥–∞.

    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {username} –∏ –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    """

    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(format_options=parsed_response["options"])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    msg_text, kb = generate_message_and_keyboard(
        answer=parsed_response["answer"],
        options=parsed_response["options"],
        prefix="choose_format"
    )

    await query.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_format)


@brand_router.callback_query(lambda c: c.data.startswith("choose_format:"))
async def process_format_choice(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    format_options = data.get("format_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    if index < 0 or index >= len(format_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    format_choice = format_options[index]
    await state.update_data(format_choice=format_choice)

    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    from handlers.brand_gen import start_audience_stage
    await start_audience_stage(query, state)


# üìç –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def start_audience_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    format_choice = data.get("format_choice")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è {username} –∏ —Ñ–æ—Ä–º–∞—Ç {format_choice}.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç. –ö—Ç–æ –±—É–¥–µ—Ç —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?

    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {format_choice} (–ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    """

    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(audience_options=parsed_response["options"])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    msg_text, kb = generate_message_and_keyboard(
        answer=parsed_response["answer"],
        options=parsed_response["options"],
        prefix="choose_audience"
    )

    await query.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_audience)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@brand_router.callback_query(lambda c: c.data.startswith("choose_audience:"))
async def process_audience_choice(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
    """
    data = await state.get_data()
    audience_options = data.get("audience_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è.")
        return

    if index < 0 or index >= len(audience_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    audience_choice = audience_options[index]
    await state.update_data(audience_choice=audience_choice)

    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É (—Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞)
    await start_value_stage(query, state)


# üìç –≠—Ç–∞–ø 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def start_value_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö username, —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    format_choice = data.get("format_choice")
    audience_choice = data.get("audience_choice")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è "{username}".
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç "{format_choice}" –∏ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{audience_choice}".
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.

    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {audience_choice} (–ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    """

    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(value_options=parsed_response["options"])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    msg_text, kb = generate_message_and_keyboard(
        answer=parsed_response["answer"],
        options=parsed_response["options"],
        prefix="choose_value"
    )

    await query.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_value)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
@brand_router.callback_query(lambda c: c.data.startswith("choose_value:"))
async def process_value_choice(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–µ–Ω–¥–∞.
    """
    data = await state.get_data()
    value_options = data.get("value_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.")
        return

    if index < 0 or index >= len(value_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    value_choice = value_options[index]
    await state.update_data(value_choice=value_choice)

    await query.answer()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–µ–Ω–¥–∞
    await show_final_profile(query, state)


@brand_router.callback_query(lambda c: c.data.startswith("choose_value:"))
async def show_final_profile(query: types.CallbackQuery, state: FSMContext):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
    "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏" –∏ "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ë–æ—Ç –∏ –ö–æ—Ç".
    """
    value_choice = query.data.split(":")[1]
    await state.update_data(value_choice=value_choice)

    data = await state.get_data()
    profile_text = f"""
    üìù –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞:
    - Username: {data['username']}
    - –§–æ—Ä–º–∞—Ç: {data['format_choice']}
    - –ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['audience_choice']}
    - –°—É—Ç—å –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å: {data['value_choice']}
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
        [InlineKeyboardButton(text="üìù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏", url="https://example.com/feedback-form")],
    ])

    await query.message.answer(profile_text, reply_markup=kb)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–∫–æ–∫ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@brand_router.callback_query(lambda c: c.data == "repeat")
async def repeat_generation(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    current_state = await state.get_state()

    if current_state == BrandCreationStates.waiting_for_format:
        await start_format_stage(query, state)

    elif current_state == BrandCreationStates.waiting_for_audience:
        await start_audience_stage(query, state)

    elif current_state == BrandCreationStates.waiting_for_value:
        await start_value_stage(query, state)

    else:
        await query.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—á–∞–ª–∞.")


@brand_router.callback_query(lambda c: c.data == "start")
async def cmd_start_from_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(query.message)
