import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.handlers.states import BrandCreationStates
from bot.handlers.main_menu import show_main_menu
from bot.services.brand_ask_ai import get_parsed_response



brand_router = Router()

GROUP_ID = -1002250762604  # ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã
THREAD_ID = 162  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π ID —Ç–µ–º—ã


def generate_message_and_keyboard(answer: str, options: list[dict], prefix: str) -> tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º callback_data.

    :param answer: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø–æ–¥–≤–æ–¥–∫–∞)
    :param options: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—ç—Ç–∞–ø—ã 1, 2, 3)
    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "choose_stage1", "choose_stage2", "choose_stage3")
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    detailed_message = f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{answer}\n\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
    for opt in options:
        detailed_message += f"‚Ä¢ {opt['full']}\n"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    buttons = [
        [InlineKeyboardButton(text=opt['short'], callback_data=f"{prefix}:{i}")]
        for i, opt in enumerate(options)
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    buttons.append([InlineKeyboardButton(text="üîÑ –ï—â–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞", callback_data="repeat_brand")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return detailed_message, keyboard


# üìç –≠—Ç–∞–ø 1: –ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Ä–µ—à–∞–µ—Ç —ç—Ç–∞ –∏–¥–µ—è?
async def stage1_problem(event: types.Message | types.CallbackQuery, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≠—Ç–∞–ø–∞ 1, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏ Message, –∏ CallbackQuery.
    """
    data = await state.get_data()
    username = data.get("username")
    context = data.get("context")  # –ò—Å—Ö–æ–¥–Ω–∞—è –∏–¥–µ—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not username:
        await event.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu_kb())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if not context:
        from bot.handlers.main_menu import back_to_menu_kb
        logging.warning("‚ö†Ô∏è Context –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ FSM! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ª–∏ –æ–Ω –≤ –Ω–∞—á–∞–ª–µ.")
        await event.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                           reply_markup=back_to_menu_kb())
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    send_message = event.message.answer if isinstance(event, types.CallbackQuery) else event.answer

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    await send_message("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    prompt = f"""
    –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}, –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ {username}.
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–º—ã—Å–ª–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ö–∞–∫–∏–µ 3 –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–π –∏–¥–µ–∏?

    –û—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {username} –∏ –ø–æ–¥–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.]

    1. **[—ç–º–æ–¥–∑–∏]** [–ü—Ä–æ–±–ª–µ–º–∞/–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å 1]: [–û–ø–∏—Å–∞–Ω–∏–µ]
    2. **[—ç–º–æ–¥–∑–∏]** [–ü—Ä–æ–±–ª–µ–º–∞/–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å 2]: [–û–ø–∏—Å–∞–Ω–∏–µ]
    3. **[—ç–º–æ–¥–∑–∏]** [–ü—Ä–æ–±–ª–µ–º–∞/–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å 3]: [–û–ø–∏—Å–∞–Ω–∏–µ]
    """

    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(stage1_options=parsed_response["options"])

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è parsed_response
    stage_text = "<b>–≠—Ç–∞–ø 1: —Å—É—Ç—å.</b>\n"
    final_answer = stage_text + parsed_response["answer"]

    msg_text, kb = generate_message_and_keyboard(
        answer=final_answer,
        options=parsed_response["options"],
        prefix="choose_stage1"
    )

    kb.inline_keyboard.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")])

    await send_message(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_stage1)


@brand_router.callback_query(lambda c: c.data.startswith("choose_stage1:"))
async def process_stage1(query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    stage1_options = data.get("stage1_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    if index < 0 or index >= len(stage1_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    stage1_choice = stage1_options[index]
    await state.update_data(stage1_choice=stage1_choice)

    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    from handlers.brand_gen import stage2_audience
    await stage2_audience(query, state)


# üìç –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def stage2_audience(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    context = data.get("context")
    stage1_choice = data.get("stage1_choice")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    await query.message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–ª: {context}.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ {username} –∏ —É–∫–∞–∑–∞–ª –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É/–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å {stage1_choice}.
    –ò—Å—Ö–æ–¥—è –∏–∑ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã, —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –≤—ã–≥–æ–¥—É –æ—Ç —Ä–µ—à–µ–Ω–∏—è.
   
   
    –û—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {stage1_choice} (–æ—Ç–º–µ—Ç—å –≤—ã–±–æ—Ä –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
1. [—ç–º–æ–¥–∑–∏] [–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 1]: [–û–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞ –∏ –∫–∞–∫–∏–µ –≤—ã–≥–æ–¥—ã –æ–Ω–∞ –ø–æ–ª—É—á–∏—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)]
2. [—ç–º–æ–¥–∑–∏] [–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 2]: [–û–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞ –∏ –∫–∞–∫–∏–µ –≤—ã–≥–æ–¥—ã –æ–Ω–∞ –ø–æ–ª—É—á–∏—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)]
3. [—ç–º–æ–¥–∑–∏] [–ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 3]: [–û–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞ –∏ –∫–∞–∫–∏–µ –≤—ã–≥–æ–¥—ã –æ–Ω–∞ –ø–æ–ª—É—á–∏—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)]

    """
    #   –ï—Å–ª–∏ —Ç—ã –æ—Ç–∫–ª–æ–Ω–∏—à—å—Å—è –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ ‚Äî –ø–µ—Ä–µ–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∑–∞–Ω–æ–≤–æ!
    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(stage2_options=parsed_response["options"])

    stage_text = "<b>–≠—Ç–∞–ø 2: –¥–ª—è –∫–æ–≥–æ?</b>\n"  # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω
    final_answer = stage_text + parsed_response["answer"]

    msg_text, kb = generate_message_and_keyboard(
        answer=final_answer,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        options=parsed_response["options"],
        prefix="choose_stage2"
    )


    kb.inline_keyboard.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")])
    await query.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_stage2)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@brand_router.callback_query(lambda c: c.data.startswith("choose_stage2:"))
async def process_stage2(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
    """
    data = await state.get_data()
    stage2_options = data.get("stage2_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è.")
        return

    if index < 0 or index >= len(stage2_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    stage2_choice = stage2_options[index]
    await state.update_data(stage2_choice=stage2_choice)

    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É (—Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞)
    await stage3_shape(query, state)


# üìç –≠—Ç–∞–ø 3: –ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–¥–µ—é, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ—ë –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å?
async def stage3_shape(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç—Ç–∞–ø–∞ 3 –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, username, –ø—Ä–æ–±–ª–µ–º—ã –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    context = data.get("context")
    stage1_choice = data.get("stage1_choice")
    stage2_choice = data.get("stage2_choice")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    await query.message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    prompt = f"""
    –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}, –≤—ã–±—Ä–∞–Ω–æ –∏–º—è "{username}".
    –ü—Ä–æ–±–ª–µ–º–∞/–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å "{stage1_choice}" –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è "{stage2_choice}" (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤).
    –° —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ, –∫–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏?
    
    –û—Ç–≤–µ—Ç –≤—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {stage2_choice} (–æ—Ç–º–µ—Ç—å –≤—ã–±–æ—Ä –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    1. [—ç–º–æ–¥–∑–∏] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [—ç–º–æ–¥–∑–∏] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [—ç–º–æ–¥–∑–∏] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    """

    parsed_response = get_parsed_response(prompt)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(stage3_options=parsed_response["options"])

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è parsed_response
    stage_text = "<b>–≠—Ç–∞–ø 3: —Ñ–æ—Ä–º–∞—Ç</b>\n"  # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω
    final_answer = stage_text + parsed_response["answer"]

    msg_text, kb = generate_message_and_keyboard(
        answer=final_answer,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        options=parsed_response["options"],
        prefix="choose_stage3"
    )

    kb.inline_keyboard.append([InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")])
    await query.message.answer(msg_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BrandCreationStates.waiting_for_stage3)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≠—Ç–∞–ø–∞ 3
@brand_router.callback_query(lambda c: c.data.startswith("choose_stage3:"))
async def process_stage3_choice(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–µ—Ç—å–µ–≥–æ —ç—Ç–∞–ø–∞ (—Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞) –∏ –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
    """
    data = await state.get_data()
    stage3_options = data.get("stage3_options", [])
    index_str = query.data.split(":", 1)[1]

    try:
        index = int(index_str)
    except ValueError:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞.")
        return

    if index < 0 or index >= len(stage3_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å —Å 'short' –∏ 'full')
    stage3_choice = stage3_options[index]
    await state.update_data(stage3_choice=stage3_choice)

    await query.answer()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞)
    await show_final_profile(query, state)



async def show_final_profile(query: types.CallbackQuery, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "üìú –ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    data = await state.get_data()
    username = data.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
    # –ó–¥–µ—Å—å stage3_choice —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ:
    # stage3_choice = data.get("stage3_choice", {})  ‚Äî –∏ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ–º short –Ω–∏–∂–µ.

    msg_text = f"‚úÖ –ü—Ä–æ–µ–∫—Ç <b>{username}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="get_project")],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
        ]
    )

    await query.message.answer(msg_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(BrandCreationStates.project_ready)


@brand_router.callback_query(lambda c: c.data == "get_project")
async def send_project_profile(query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üìú –ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç".
    """
    data = await state.get_data()

    username = data.get("username")
    context = data.get("context")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è stage1_choice –∏ stage2_choice
    stage1_choice = data.get("stage1_choice", {})
    stage2_choice = data.get("stage2_choice", {})
    stage3_choice = data.get("stage3_choice", {})

    if isinstance(stage1_choice, dict):
        stage1_choice = stage1_choice.get("short", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    if isinstance(stage2_choice, dict):
        stage2_choice = stage2_choice.get("short", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    if isinstance(stage3_choice, dict):
        stage3_choice = stage3_choice.get("short", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    await query.message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –≤—Å—ë –≤–º–µ—Å—Ç–µ...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—ç–≥–ª–∞–π–Ω –∏ –ø—Ä–∏–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞:
    - –ú—ã—Å–ª—å: {context}
    - –ù–∞–∑–≤–∞–Ω–∏–µ: {username}
    - –ü—Ä–æ–±–ª–µ–º–∞: {stage1_choice}
    - –ê—É–¥–∏—Ç–æ—Ä–∏—è: {stage2_choice}
    - –§–æ—Ä–º–∞—Ç: {stage3_choice}
    
    –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π:
    1. **–¢—ç–≥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞** ‚Äì –∫–æ—Ä–æ—Ç–∫–æ–µ, —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ —Å—É—Ç–∏ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
    2. **3 —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞** –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ, —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ.
    
    –£—á–∏—Ç—ã–≤–∞–π –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –º—ã—Å–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    –¢—ç–≥–ª–∞–π–Ω: [–∫–æ—Ä–æ—Ç–∫–æ–µ, —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]
    [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

    –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:
    1. **[–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]** ‚Äì [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å—É—Ç–∏ –∏ —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞]
    2. **[–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]** ‚Äì [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å—É—Ç–∏ –∏ —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞]
    3. **[–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]** ‚Äì [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å—É—Ç–∏ –∏ —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞]
    """

    parsed_response = get_parsed_response(prompt)
    tagline = parsed_response.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—ç–≥–ª–∞–π–Ω.").replace("–¢—ç–≥–ª–∞–π–Ω:", "").strip()
    references = parsed_response.get("options", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    profile_text = f"""
üìù <b>–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞</b>

<b>{username}</b>  
<strong>{tagline}</strong>

<b>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:</b>
üîπ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {stage1_choice}  
üîπ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {stage2_choice}  
üîπ <b>–§–æ—Ä–º–∞—Ç:</b> {stage3_choice}  

<b>–ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>
"""

    if references:
        for ref in references:
            profile_text += f"üîπ {ref['full']}\n"
    else:
        profile_text += "‚ùå –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"

    profile_text += f"\n<i>{context}</i>"

    # **–°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É**
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç–æ–º", callback_data="forward_project")],
        [InlineKeyboardButton(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")]
    ])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await query.message.answer(profile_text, parse_mode="HTML", reply_markup=keyboard)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–∫–æ–∫ "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"
@brand_router.callback_query(lambda c: c.data == "repeat_brand")
async def repeat_generation(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    current_state = await state.get_state()

    if current_state == BrandCreationStates.waiting_for_stage1:
        await stage1_problem(query, state)

    elif current_state == BrandCreationStates.waiting_for_stage2:
        await stage2_audience(query, state)

    elif current_state == BrandCreationStates.waiting_for_stage3:
        await stage3_shape(query, state)

    else:
        await query.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—á–∞–ª–∞.")


@brand_router.callback_query(lambda c: c.data == "repeat_brand")
async def cmd_start_from_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(query.message)


from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

FEEDBACK_CHAT_ID = -4770810793  # ID –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã

# –•—Ä–∞–Ω–∏–º –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ratings = {}

@brand_router.callback_query(lambda c: c.data == "leave_feedback")
async def request_feedback(query: types.CallbackQuery):
    """
    –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ü–µ–Ω–∫—É (1-5 –∑–≤—ë–∑–¥).
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            InlineKeyboardButton(text="‚≠ê", callback_data="rate_1"),
            InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rate_2"),
            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rate_3"),
        ],
        [  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5"),
        ]
    ])

    await query.message.answer("–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 ‚≠ê:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É
async def send_feedback_to_group(bot, rating: str, username: str, full_name: str, comment: str):
    feedback_text = (
        f"üì© <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n\n"
        f"üë§ <b>–û—Ç:</b> @{username} ({full_name})\n"
        f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {rating}/5\n\n"
        f"üí¨ <b>–û—Ç–∑—ã–≤:</b> {comment}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É
    await bot.send_message(FEEDBACK_CHAT_ID, feedback_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@brand_router.callback_query(lambda c: c.data.startswith("rate_"))
async def receive_rating(query: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    """
    rating = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(user_rating=rating)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="skip_comment")]
    ])

    await query.message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É {rating}‚≠ê!\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚å®Ô∏è",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@brand_router.callback_query(lambda c: c.data == "skip_comment")
async def skip_comment(query: types.CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
    """
    data = await state.get_data()
    rating = data.get("user_rating", "N/A")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await send_feedback_to_group(query.bot, rating, query.from_user.username, query.from_user.full_name, "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üéâ")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(query.message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
@brand_router.message()
async def forward_feedback(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
    """
    if message.chat.type == "private":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
        data = await state.get_data()
        rating = data.get("user_rating", "N/A")

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–∏—à–µ–º "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        comment = message.text if message.text else "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        await send_feedback_to_group(message.bot, rating, message.from_user.username, message.from_user.full_name, comment)

        # –ü–æ–ª—É—á–∞–µ–º callback_query –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è query.answer()
        query = await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üéâ")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏


        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ –±–µ–∑
@brand_router.message()
async def forward_feedback(message: types.Message, state: FSMContext):
    """
    –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
    """
    if message.chat.type == "private":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
        data = await state.get_data()
        rating = data.get("user_rating", "N/A")

        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        if message.text:
            feedback_text = (
                f"üì© <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n\n"
                f"üë§ <b>–û—Ç:</b> @{message.from_user.username} ({message.from_user.full_name})\n"
                f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {rating}/5\n\n"
                f"üí¨ <b>–û—Ç–∑—ã–≤:</b> {message.text}"
            )
        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        else:
            feedback_text = (
                f"üì© <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n\n"
                f"üë§ <b>–û—Ç:</b> @{message.from_user.username} ({message.from_user.full_name})\n"
                f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {rating}/5\n\n"
                f"üí¨ <b>–û—Ç–∑—ã–≤:</b> –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É
        await message.bot.send_message(FEEDBACK_CHAT_ID, feedback_text, parse_mode="HTML")

        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üéâ")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        await show_main_menu(message)  # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É start


@brand_router.callback_query(lambda c: c.data == "forward_project")
async def forward_project(query: types.CallbackQuery):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞) –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É.
    """

    logging.info("üîÑ –ü–æ–ª—É—á–µ–Ω callback –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        forwarded_message = await query.message.forward(GROUP_ID, message_thread_id=THREAD_ID)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await query.message.answer(
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ <a href='https://t.me/c/{str(GROUP_ID)[4:]}'><b>–≥—Ä—É–ø–ø—É</b></a>!",
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    except Exception as e:
        await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
