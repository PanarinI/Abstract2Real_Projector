import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .states import BrandCreationStates
from bot.handlers.main_menu import show_main_menu
from bot.services.brand_ask_ai import ask_ai, parse_ai_response



brand_router = Router()



#–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–Ω–æ–ø–∫–∞—Ö


def create_multiline_inline_buttons(options: list[str], max_line_length: int = 30) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.
    """
    buttons = []

    for index, option in enumerate(options):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–µ max_line_length —Å–∏–º–≤–æ–ª–æ–≤
        if len(option) > max_line_length:
            option = "\n".join([option[i:i + max_line_length] for i in range(0, len(option), max_line_length)])

        button = InlineKeyboardButton(text=option['short'], callback_data=f"choose_option:{index}")
        buttons.append([button])  # –í–∞–∂–Ω–æ! –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –æ—Ç–¥–µ–ª—å–Ω–æ
    buttons.append([InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")])

    # –ü–µ—Ä–µ–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –≤ inline_keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return keyboard


# üìç –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
async def start_format_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ username.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª username {username}.
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {username} —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–º—ã—Å–ª–∞, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±—Ä–µ–Ω–¥–∞.
   
    –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
    
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {username} –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    
    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]

    –º–∞–∫—Å. 12-15 —Å–ª–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    """

    response = ask_ai(prompt)
    logging.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI: {response}")
    parsed_response = parse_ai_response(response)
    logging.info(f"–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {parsed_response}")

    if not parsed_response["answer"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI: {response}")
        return

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–ø—Ü–∏–π: {response}")
        return

    await state.update_data(format_options=parsed_response["options"])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    detailed_message = f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{parsed_response['answer']}\n\n"
    detailed_message += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"

    for index, option in enumerate(parsed_response["options"]):
        detailed_message += f"‚Ä¢ {option['full']}\n"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option['short'], callback_data=f"choose_format:{index}")]
        for index, option in enumerate(parsed_response["options"])
    ] + [[InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")]])

    await query.message.answer(detailed_message, reply_markup=kb, parse_mode="HTML")

    await state.set_state(BrandCreationStates.waiting_for_format)


@brand_router.callback_query(lambda c: c.data.startswith("choose_format:"))
async def process_format_choice(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
    """
    data = await state.get_data()
    format_options = data.get("format_options", [])
    index = int(query.data.split(":", 1)[1])

    if index < 0 or index >= len(format_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    format_choice = format_options[index]
    await state.update_data(format_choice=format_choice)

    await query.answer()
    from handlers.brand_gen import start_audience_stage
    await start_audience_stage(query, state)




# üìç –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def start_audience_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    format_choice = data.get("format_choice")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è {username} –∏ —Ñ–æ—Ä–º–∞—Ç {format_choice}.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç. –ö—Ç–æ –±—É–¥–µ—Ç —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?
    
    –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
    
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {format_choice} (–ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    
    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    
    Friendly-hint: 12-15 —Å–ª–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    """



    response = ask_ai(prompt)
    parsed_response = parse_ai_response(response)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(audience_options=parsed_response["options"])

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option['short'], callback_data=f"choose_audience:{index}")]
        for index, option in enumerate(parsed_response["options"])
    ] + [[InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")]])

    await query.message.answer(parsed_response["answer"], reply_markup=kb)
    await state.set_state(BrandCreationStates.waiting_for_audience)


# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@brand_router.callback_query(lambda c: c.data.startswith("choose_audience:"))
async def process_audience_choice(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
    """
    data = await state.get_data()
    audience_options = data.get("audience_options", [])
    index = int(query.data.split(":", 1)[1])

    if index < 0 or index >= len(audience_options):
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    audience_choice = audience_options[index]
    await state.update_data(audience_choice=audience_choice)
    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {audience_choice}")

    await start_value_stage(query, state)



# üìç –≠—Ç–∞–ø 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
async def start_value_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö username, —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞.
    """
    data = await state.get_data()
    username = data.get("username")
    format_choice = data.get("format_choice")
    audience_choice = data.get("audience_choice")

    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–º—è "{username}".
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç "{format_choice}" –∏ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "{audience_choice}".
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—É—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.
        
    –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
    
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–±–æ—Ä—É {audience_choice} (–ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ) –∏ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å-–ø–æ–¥–≤–æ–¥–∫–∞ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    
    1. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    2. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    3. [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—è—Å–Ω—è—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç]
    
    Friendly-hint: 12-15 —Å–ª–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    """

    response = ask_ai(prompt)
    parsed_response = parse_ai_response(response)

    if not parsed_response["options"]:
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(value_options=parsed_response["options"])

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=option['short'], callback_data=f"choose_value:{index}")]
        for index, option in enumerate(parsed_response["options"])
    ] + [[InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")]])

    await query.message.answer(parsed_response["answer"], reply_markup=kb)
    await state.set_state(BrandCreationStates.waiting_for_value)


@brand_router.callback_query(lambda c: c.data.startswith("choose_value:"))
async def final_stage(query: types.CallbackQuery, state: FSMContext):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
    "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏" –∏ "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –ë–æ—Ç –∏ –ö–æ—Ç".
    """
    value_choice = query.data.split(":")[1]
    await state.update_data(value_choice=value_choice)

    data = await state.get_data()
    profile_text = f"""
    üìù –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–µ–Ω–¥–∞:
    - Username: {data['username']}
    - –§–æ—Ä–º–∞—Ç: {data['format_choice']}
    - –ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['audience_choice']}
    - –°—É—Ç—å –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å: {data['value_choice']}
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")],
        [InlineKeyboardButton(text="üìù –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏", url="https://example.com/feedback-form")],
    ])

    await query.message.answer(profile_text, reply_markup=kb)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–∫–æ–∫ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@brand_router.callback_query(lambda c: c.data == "repeat")
async def repeat_generation(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback

    current_state = await state.get_state()

    if current_state == BrandCreationStates.waiting_for_format:
        await start_format_stage(query, state)

    elif current_state == BrandCreationStates.waiting_for_audience:
        await start_audience_stage(query, state)

    elif current_state == BrandCreationStates.waiting_for_value:
        await start_value_stage(query, state)

    else:
        await query.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—á–∞–ª–∞.")


@brand_router.callback_query(lambda c: c.data == "start")
async def cmd_start_from_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(query.message)
