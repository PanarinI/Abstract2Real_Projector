import asyncpg
import os
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –æ–±–ª–∞—á–Ω—ã–π
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"

# ‚öôÔ∏è –†–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
DB_CONFIG = {
    "database": os.getenv("LOCAL_DB_NAME" if IS_LOCAL else "CLOUD_DB_NAME"),
    "user": os.getenv("LOCAL_DB_USER" if IS_LOCAL else "CLOUD_DB_USER"),
    "password": os.getenv("LOCAL_DB_PASSWORD" if IS_LOCAL else "CLOUD_DB_PASSWORD"),
    "host": os.getenv("LOCAL_DB_HOST" if IS_LOCAL else "CLOUD_DB_HOST"),
    "port": os.getenv("LOCAL_DB_PORT" if IS_LOCAL else "CLOUD_DB_PORT", "5432"),
}

logging.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–õ–û–ö–ê–õ–¨–ù–ê–Ø' if IS_LOCAL else '–û–ë–õ–ê–ß–ù–ê–Ø'}")
logging.info(f"    HOST = {DB_CONFIG['host']}")
logging.info(f"    DB NAME = {DB_CONFIG['database']}")
logging.info(f"    USER = {DB_CONFIG['user']}")
logging.info(f"    PASSWORD = {'‚úÖ' if DB_CONFIG['password'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
pool = None


async def init_db_pool():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global pool
    try:
        logging.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {'–ª–æ–∫–∞–ª—å–Ω–æ–π' if IS_LOCAL else '–æ–±–ª–∞—á–Ω–æ–π'} –ë–î: {DB_CONFIG['host']}")

        pool = await asyncpg.create_pool(
            database=DB_CONFIG["database"],
            user=DB_CONFIG["user"],
            password=DB_CONFIG["password"],
            host=DB_CONFIG["host"],
            port=DB_CONFIG["port"],
            min_size=1,  # üìå –ú–∏–Ω–∏–º—É–º 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            max_size=10  # üìå –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        )
        logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        pool = None


async def get_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞. –ï—Å–ª–∏ –ø—É–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç."""
    global pool
    if pool is None:
        logging.warning("‚ö†Ô∏è –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é...")
        await init_db_pool()  # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—É–ª

    if pool is None:
        logging.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –ø—É–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return None

    return await pool.acquire()


async def close_db_pool():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    global pool
    if pool:
        await pool.close()
        logging.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç.")


async def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    await init_db_pool()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–∑–¥–∞–Ω
    conn = await get_connection()
    if conn is None:
        logging.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å init_db ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")
        return
    try:
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        CREATE_TABLE_SQL_PATH = os.path.join(BASE_DIR, "create_table.sql")

        if os.path.exists(CREATE_TABLE_SQL_PATH):
            with open(CREATE_TABLE_SQL_PATH, "r", encoding="utf-8") as file:
                create_table = file.read()

            await conn.execute(create_table)
            logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'generated_usernames' –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞.")
        else:
            logging.error(f"‚ùå –§–∞–π–ª {CREATE_TABLE_SQL_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω! –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    finally:
        await pool.release(conn)


async def save_username_to_db(username: str, status: str, context: str, category: str, style: str = "None",
                              llm: str = "None"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç username –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = await get_connection()
    if conn is None:
        logging.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å save_username_to_db ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")
        return

    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    INSERT_SQL_PATH = os.path.join(BASE_DIR, "insert_username.sql")

    if not os.path.exists(INSERT_SQL_PATH):
        logging.error("‚ùå INSERT_SQL –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –§–∞–π–ª insert_username.sql –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    with open(INSERT_SQL_PATH, "r", encoding="utf-8") as file:
        INSERT_SQL = file.read()

    try:
        await conn.execute(INSERT_SQL, username, status, category, context, style, llm)
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: @{username} | {status} | {category} | {context} | {style} | {llm}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
    finally:
        await pool.release(conn)
