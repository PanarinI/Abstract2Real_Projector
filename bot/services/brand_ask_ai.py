import os
import logging
from dotenv import load_dotenv
from openai import OpenAI
from bot import config

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
def ask_ai(prompt: str) -> str:
    try:
        response = client.chat.completions.create(
            model=config.MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=config.MAX_TOKENS,
            temperature=config.TEMPERATURE,
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        return ""


import logging
import re

def parse_ai_response(response: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
      "answer": str,                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ–¥–≤–æ–¥–∫–∞)
      "options": [                  # –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
          {
              "short": str,         # –î–ª—è –∫–Ω–æ–ø–∫–∏ (—Å –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–æ–π)
              "full": str           # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã)
          },
          ...
      ]
    }
    """
    parsed_data = {
        "answer": "",
        "options": []
    }

    if not response or not response.strip():
        logging.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–∞—Ä—Å–µ—Ä!")
        return parsed_data

    # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = response.strip().split('\n')

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
    def clean_text(text: str) -> str:
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
        return re.sub(r'[*_\-~`]+', '', text)

    for line in lines:
        line = clean_text(line.strip())
        if not line:
            continue

        # 1) –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ß—Ç–æ-—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ"
        if line.lower().startswith("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"):
            parsed_data["answer"] = line.split(":", 1)[1].strip()
            continue

        # 2) –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "1. üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π: ..."
        # –£—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ—Ç–µ—Ç—å —Å –∏–Ω–¥–µ–∫—Å–∞
        if len(line) > 2 and line[0].isdigit() and line[1] == '.':
            # –£–¥–∞–ª—è–µ–º "1." –∏–ª–∏ "2." –∏ —Ç.–¥.
            option_body = line.split('.', 1)[1].strip()

            # –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ split: "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞..."
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥." –∏ "–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
            if ':' not in option_body:
                continue

            left_part, details = option_body.split(':', 1)
            left_part = left_part.strip()
            details = details.strip()

            # –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—É –æ—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
            # –§–æ—Ä–º–∞—Ç —à–∞–±–ª–æ–Ω–∞: [–ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞] [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]
            # –ü—Ä–∏–º–µ—Ä: "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π"
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª—é—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º,
            # –ª–∏–±–æ –≤—Ä—É—á–Ω—É—é: –æ—Ç–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π ¬´—Å–ª–æ–≤–æ-—ç–º–æ–¥–∑–∏¬ª –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ.

            # –ü–†–ò–ú–ï–†: left_part = "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π"
            # –ú—ã —Ö–æ—Ç–∏–º: emoji="üí°", short_text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π"

            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–æ–¥—Ö–æ–¥: –∏—â–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–µ–ª:
            # –ù–æ –µ—Å–ª–∏ AI –≤–µ—Ä–Ω–µ—Ç "üí°  –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π" —Å –¥–≤–æ–π–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º, –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å .split().
            segments = left_part.split(maxsplit=1)  # —Ä–∞–∑–±–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ 2 —á–∞—Å—Ç–∏
            if len(segments) == 2:
                emoji, short_text = segments[0], segments[1]
            else:
                # –µ—Å–ª–∏ AI –Ω–µ –¥–∞–ª –ø—Ä–æ–±–µ–ª, –∑–Ω–∞—á–∏—Ç –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞, –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                emoji, short_text = "", segments[0]

            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –≤–¥—Ä—É–≥:
            emoji = clean_text(emoji).strip()
            short_text = clean_text(short_text).strip()

            # Form short & full
            # short -> –¥–ª—è –∫–Ω–æ–ø–∫–∏, –≤–∫–ª—é—á–∞–µ—Ç –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—É
            button_text = f"{emoji} {short_text}".strip()

            # full -> –±–µ–∑ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã, –≤ bold –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ + –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            full_text = f"<b>{short_text}</b>: {details}"

            parsed_data["options"].append({
                "short": button_text,
                "full": full_text
            })

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
    if not parsed_data["answer"]:
        logging.error("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª 'answer' –≤ –æ—Ç–≤–µ—Ç–µ AI!")
        parsed_data["answer"] = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç AI."

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    if not parsed_data["options"]:
        logging.error("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª 'options' –≤ –æ—Ç–≤–µ—Ç–µ AI!")
        parsed_data["options"] = [{
            "short": "–û—à–∏–±–∫–∞",
            "full": "–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        }]

    return parsed_data





